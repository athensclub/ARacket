package aracket.lang;

import java.util.Iterator;
import java.util.LinkedList;

import a10lib.compiler.syntax.Statement;
import aracket.core.RacketDictionary;
import aracket.core.RacketInterpreter;

/**
 * A racket function generated by creating function in racket
 * 
 * @author Athensclub
 *
 */
public class RacketDefaultFunction extends RacketFunction{

    private Statement body;
    
    private LinkedList<String> argNames;
    
    /**
     * Body is the body of this function. argNames is name of the argument in order from getFirst() to getLast()
     * 
     * @param interpreter
     * @param body
     */
    public RacketDefaultFunction(RacketInterpreter interpreter,Statement body,LinkedList<String> argNames) {
	super(interpreter);
	this.body = body;
	this.argNames = argNames;
    }

    @Override
    public RacketObject invoke(RacketDictionary scope, RacketObject... args) {
	RacketDictionary thisScope = new RacketDictionary(scope,getInterpreter());
	if(args.length == argNames.size()) {
	    Iterator<String> it = argNames.iterator();
	    int i = 0;
	    while(it.hasNext()) {
		thisScope.define(it.next(), args[i]);
		i++;
	    }
	}else {
	    throw new IllegalArgumentException("Invalid argument count for function expected " + argNames.size() + " found: " + args.length);
	}
	return getInterpreter().evaluate(body, thisScope);
    }

}
